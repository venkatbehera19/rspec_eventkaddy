module Example
  # an example attendee for the purposes of previewing templates
  def self.attendee
    Attendee.new(
      event_id:                      1,
      is_demo:                       true,
      first_name:                    'John',
      last_name:                     'Doe',
      honor_prefix:                  'Dr.',
      honor_suffix:                  'PhD',
      title:                         'Chief Veterinarian',
      company:                       'Event Kaddy',
      biography:                     'Born and raised in Alberta, John Doe began his illustrious career... and so on.',
      business_unit:                 'CA',
      business_phone:                '555-555-5555',
      mobile_phone:                  '555-555-5555',
      country:                       'Canada',
      state:                         'Alberta',
      city:                          'Calgary',
      email:                         'johndoe@eventkaddy.net',
      notes_email:                   'johndoe@eventkaddy.net',
      notes_email_pending:           false,
      temp_photo_filename:           'temp_photo_filename',
      photo_filename:                'photo_filename',
      photo_event_file_id:           0,
      created_at:                    Time.now.to_s,
      updated_at:                    Time.now.to_s,
      account_code:                  '000',
      iattend_sessions:              '', # replace with real sessions if needed for say, a pdf example. same with event id
      assignment:                    '1',
      validar_url:                   'validar_url',
      publish:                       true,
      twitter_url:                   'twitter_url',
      facebook_url:                  'facebook_url',
      linked_in:                     'linked_in',
      username:                      'John',
      password:                      'John123',
      attendee_type_id:              1,
      messaging_opt_out:             false,
      app_listing_opt_out:           false,
      game_opt_out:                  false,
      first_run_toggle:              false,
      video_portal_first_run_toggle: false,
      custom_filter_1:               'custom_filter_1',
      custom_filter_2:               'custom_filter_2',
      custom_filter_3:               'custom_filter_3',
      pn_filters:                    'pn_filters',
      token:                         'token',
      tags_safeguard:                'tags_safeguard',
      speaker_biography:             'speaker_biography',
      custom_fields_1:               'custom_fields_1',
      survey_results:                'survey_results',
      travel_info:                   'travel_info',
      table_assignment:              'table_assignment',
      custom_fields_2:               'custom_fields_2',
      custom_fields_3:               'custom_fields_3',
      slug:                           '11111111111111'
    )
  end

  # ModelInfo.hash_for_model Speaker
  def self.speaker
    Speaker.new(
      event_id:             1,
      unpublished:          1,
      first_name:           "Jill",
      last_name:            "Jones",
      honor_prefix:         "Dr.",
      honor_suffix:         "Phd.",
      title:                "Director of Commerce",
      company:              "Event Kaddy",
      biography:            "Born in Chicago blah blah blah",
      photo_filename:       nil,
      photo_event_file_id:  nil,
      email:                "JillJones@eventkaddy.com",
      created_at:           Time.now,
      updated_at:           Time.now,
      user_id:              nil,
      speaker_code:         "test0000",
      middle_initial:       "M",
      notes:                nil,
      availability_notes:   nil,
      address1:             "123 Fake Bvd.",
      address2:             nil,
      address3:             nil,
      city:                 "Ottawa",
      state:                "ON",
      country:              "Canada",
      zip:                  nil,
      work_phone:           "555-5555",
      mobile_phone:         "555-5555",
      home_phone:           "555-5555",
      fax:                  "555-5555",
      financial_disclosure: nil,
      cv_event_file_id:     nil,
      fd_tax_id:            nil,
      fd_pay_to:            nil,
      fd_street_address:    nil,
      fd_city:              nil,
      fd_state:             nil,
      fd_zip:               nil,
      fd_event_file_id:     nil,
      speaker_type_id:      1,
      twitter_url:          nil,
      facebook_url:         nil,
      linked_in:            nil,
      unsubscribed:         nil,
      token:                nil,
      custom_filter_1:      nil,
      custom_filter_2:      nil,
      custom_filter_3:      nil
    )
  end

  def self.exhibitor
    Exhibitor.new(
      location_mapping_id:        1,
      event_id:                   1,
      unpublished:                1,
      user_id:                    nil,
      logo_event_file_id:         nil,
      sponsor_level_type_id:      1,
      company_name:               "EventKaddy",
      description:                "Conference App Solutions",
      logo:                       nil,
      address_line1:              nil,
      address_line2:              nil,
      city:                       nil,
      zip:                        nil,
      state:                      nil,
      country:                    nil,
      email:                      'JillJones@eventkaddy.com',
      phone:                      nil,
      fax:                        nil,
      url_web:                    nil,
      url_twitter:                nil,
      url_facebook:               nil,
      url_linkedin:               nil,
      url_rss:                    nil,
      message:                    nil,
      is_sponsor:                 nil,
      created_at:                 Time.now,
      updated_at:                 Time.now,
      contact_name:               'Jill Jones',
      contact_title:              nil,
      toll_free:                  nil,
      unsubscribed:               nil,
      token:                      nil,
      custom_fields:              nil,
      tags_safeguard:             nil,
      exhibitor_code:             'test000',
      diy_uploaded_location_name: nil,
      diy_uploaded_tagsets:       nil,
      exhibitor_files_url:        nil
    )
  end

  # need a user to be used in conjunction with a speaker or exhibitor
  # this fake user really needs a role too, or it won't work for my purposes
  # I could just... let it create the speaker, and then delete it as part of cleanup
  def self.user
    User.new(
      email:                  "JillJones@eventkaddy.com",
      encrypted_password:     "123",
      reset_password_token:   nil,
      reset_password_sent_at: Time.now,
      remember_created_at:    Time.now,
      sign_in_count:          0,
      current_sign_in_at:     Time.now,
      last_sign_in_at:        Time.now,
      current_sign_in_ip:     nil,
      last_sign_in_ip:        nil,
      created_at:             Time.now,
      updated_at:             Time.now
    )
  end
end
