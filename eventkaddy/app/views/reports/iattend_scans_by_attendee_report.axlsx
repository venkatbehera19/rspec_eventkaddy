wb = xlsx_package.workbook
wb.use_shared_strings = true

def session_data
  # Session.select('date, start_at, end_at, title, session_code').where(event_id:@event_id).as_json(root:false)
  @session_data ||= Session.select('title, session_code').where(event_id:@event_id).as_json(root:false)
end

def session_info_for_session_codes session_codes
  return '' unless session_codes && session_codes.length > 0
  session_codes = session_codes.split(',')
  session_data.
    select {|s| session_codes.include? s["session_code"] }.
    map {|s| "#{s["session_code"]} - #{s["title"]}" }.
    join("\r\r") # must use "" not '', or the \r gets interpretted literally
    # join("\x0D\x0A")
end

# there could potentially be more than one... and an attendee could answer the same lead survey to more than one exhibitor of course
def lead_survey
  if @survey
    @survey
  else
    survey_type_id = SurveyType.where(name: "Exhibitor Lead Survey").first.id
    @survey = Survey.where(event_id:@event_id, survey_type_id: survey_type_id)
  end
end

wb.styles do |s|
  black_cell = s.add_style :bg_color => "00", :fg_color => "FF", :sz => 14, :alignment => { :horizontal=> :center }
  wrap       = s.add_style alignment: {wrap_text: true}

  # Attendee.columns.map &:name # ["id", "event_id", "is_demo", "first_name", "last_name", "honor_prefix", "honor_suffix", "title", "company", "biography", "business_unit", "business_phone", "mobile_phone", "country", "state", "city", "email", "notes_email", "notes_email_pending", "temp_photo_filename", "photo_filename", "photo_event_file_id", "created_at", "updated_at", "account_code", "iattend_sessions", "assignment", "validar_url", "publish", "twitter_url", "facebook_url", "linked_in", "username", "password", "attendee_type_id", "messaging_opt_out", "app_listing_opt_out", "game_opt_out", "first_run_toggle", "video_portal_first_run_toggle", "custom_filter_1", "custom_filter_2", "custom_filter_3", "pn_filters", "token", "tags_safeguard", "speaker_biography", "custom_fields_1", "survey_results", "travel_info", "table_assignment", "custom_fields_2", "custom_fields_3"]

  heads = [
    "Last Name",
    "First Name",
    "Company",
    "Title",
    "Email",
    "Address",
    "City",
    "State",
    "Zip", # unavailable
    "Country",
    "Business Phone",
    "Mobile Phone",
    "Account Code",
    "Campaign Name", # this is the event name
    "Sessions"
  ]

  # our existing query pulls all data by the booth owner. This time we have to pull by the lead the survey was about.
  kiosk_heads = [
    "Booth Name",
    "Rep Name", # name of the exhibitor attendee who filled out the survey
    "Last Name",
    "First Name", # this is the name of the attendee who was scanned... the lead. so all the surveys they did are in one cell
    "Company",
    "Title",
    "Email",
    "Address",
    "City",
    "State",
    "Zip", # custom_filter_1 for the event in question
    "Country",
    "Business Phone",
    "Mobile Phone",
    "Account Code"
  ]
  

  style = heads.map {|h| black_cell }

  attendees = Attendee.where(event_id: @event_id)
  responses = Response.lead_survey_results_grouped(@event_id)

  if @job
    @job.update!( status: "Processing Rows", total_rows: attendees.length + responses.length)
    @job.write_to_file
  end

  kiosk_sheet = wb.add_worksheet( name: ("Kiosk") )

  questions = Question.find_by_sql(["
    SELECT s.title AS title, q.question AS question, s.id AS survey_id, q.order AS question_order, ss.order AS section_order
    FROM questions AS q
    LEFT JOIN surveys          AS s  ON s.id                = q.survey_id
    LEFT JOIN survey_sections  AS ss ON q.survey_section_id = ss.id
    WHERE q.event_id = ? AND s.survey_type_id = 6
  ", @event_id])

  kiosk_heads = kiosk_heads.concat( questions.map {|q| "#{q.title} #{q.question}"} )

  kiosk_sheet.add_row(
    kiosk_heads,
    :style => kiosk_heads.map {|h| black_cell }
  )

  sheet = wb.add_worksheet( name: ("Sessions") )

  sheet.add_row heads, :style => style

  event_name = Event.find( @event_id ).name #not sure why @event is not accessible here... something broken with the job abstraction

  attendees.each { |a|

    row = [
      a[:last_name],
      a[:first_name],
      a[:company],
      a[:title],
      a[:email],
      a[:address],
      a[:city],
      a[:state],
      a[:custom_filter_1], # zip
      a[:country],
      a[:business_phone],
      a[:mobile_phone],
      a[:account_code],
      event_name, # campaign
      session_info_for_session_codes( a[:iattend_sessions] )
    ]

    sheet.add_row row, style: wrap

    @job.plus_one_row if @job
    sheet.column_widths *row.map{ |i| 30 }
  }

	#Set encoding options to remove nasty Trademark symbols
	encoding_options = {
		:invalid           => :replace,  # Replace invalid byte sequences
		:undef             => :replace,  # Replace anything not defined in ASCII
		:replace           => '',        # Use a blank for those replacements
		:universal_newline => true       # Always break lines with \n
	}

	# .force_encoding("ISO-8859-1")
	encode = ->(string) {
		string.encode( Encoding.find('ASCII'), encoding_options )
		#string.encode("ISO-8859-1", :invalid=>:replace, :replace=>"?")#.encode("ISO-8859-1")
	}

  responses.each {|r|
    row = [
      r[:company_names],
      r[:rep_names],
      r[:lead_last_name],
      r[:lead_first_name],
      r[:lead_company],
      r[:lead_title],
      r[:lead_email],
      r[:lead_address],
      r[:lead_city],
      r[:lead_state],
      r[:lead_zip],
      r[:lead_country],
      r[:lead_business_phone],
      r[:lead_mobile_phone],
      r[:lead_account_code]
    ].concat(
			questions.map {|q|
					r.responses_for(q.survey_id, q.section_order, q.question_order).
						map {|r|
							begin
								encode[ "#{r[:company_name]}\r#{r[:response]}" ]
								# "#{r[:company_name]}\r#{r[:response]}".gsub("®", "(r)") 
								# r[:company_name].to_s.gsub("®", "(r)") + "\r" + r[:response].to_s.gsub("®", "(r)")
							rescue => e
								raise "Error while concatenating. '#{r[:company_name]}' and '#{r[:response]}'.\r #{e.message}"
								# raise "Error while adding row to sheet. #{row.inspect}"
							end
						}.join("\r\r")
			}
    )

		# this does not trigger an exception.... probably because nothing is done until the sheet actually renders
			kiosk_sheet.add_row row, style: wrap
    @job.plus_one_row if @job
    kiosk_sheet.column_widths *row.map{ |i| 30 }
  }

  # kiosk is unfortuantely a different report entirely...

end
