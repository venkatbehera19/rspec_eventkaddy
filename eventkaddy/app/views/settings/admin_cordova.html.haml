:ruby
    categories = Setting.cordova_all_props.map{|r| r[:category] || "No Category"}.uniq
    admin_settings = Setting.cordova_all_props.
        select {|r| !r[:leave_out_of_cms] && r[:access_level] == "SuperAdmin" }
:javascript
    $(function() {
        var checkTrue = function() {
            let formLabel = $(this).children("label.form-check-label")
            $(formLabel).children('input')[1].checked = true;
            $(formLabel).children('input').val('1');
            $(formLabel).prop('checked', true);
        };
        var checkFalse = function() {
            // $(formLabel).children('input')[0].value = 0;
            let formLabel = $(this).children("label.form-check-label")
            $(formLabel).children('input')[1].checked = false;
            $(formLabel).children('input').val('0');
            $(formLabel).prop('checked', false);
        };
        var checkClickHandler = function(checkbox_container_class) {
            $('.check_all_' + checkbox_container_class).on('click', function() {
                $('.' + checkbox_container_class).each(checkTrue);
            });
        };
        var uncheckClickHandler = function(checkbox_container_class) {
            $('.uncheck_all_' + checkbox_container_class).on('click', function() {
                $('.' + checkbox_container_class).each(checkFalse);
            });
        };
        var addCheckHandlers = function(checkbox_container_class) {
            checkClickHandler( checkbox_container_class );
            uncheckClickHandler( checkbox_container_class );
        };

        #{categories.to_json.html_safe}.forEach(function(category) {
            addCheckHandlers( category.replace(/\W/g, '') );
        })


        // $( "#accordion" ).accordion({
            // heightStyle: "content",
            // collapsible: true
        // });

        // html forms and checkboxes act a little bizarrely and won't send unchecked boxes unless you explicitly force them to
        $(':checkbox').on('change', function(e) {
            if ($(this).prop('checked')) {
                $(this).val('1')
                $(this).prop('checked', true);
            } else {
                $(this).val('0');
                $(this).prop('checked', false);
            }
        });
    });

:css
    #accordion {
       margin-top:10px;
       margin-bottom:10px;
    }

    #accordion > h4 {
        padding:10px;
        cursor: pointer;
    }
    .acc-div {
        padding:10px;
    }

%h3 Admin Cordova Settings

- if current_user.role? :super_admin
    .bg-light.custom-border.px-3.py-3{style:'min-height:500px;'}

        %h4 Some Notes
        %p The template for this form lives in /cordova_setting_profiles/main.csv. It is automatically generated by the data contained within, including the default values when none has been selected yet. There are plans to be able to add additional profiles with ammendments to main.csv for easily setting up new events with similar settings. main.csv must always be the master list of settings, however.
        %p Settings can be organized into logical groups by modifying the main.csv file's Category column. Access to these settings is restricted via the Access Level column (currently all SuperAdmin). An option called Leave Out of CMS can be set to TRUE in order to avoid including settings which are not useful in this form, such as proxy keys and url paths.
        %p Settings have been compiled from settings.js, string-settings, game-settings, style-settings.
        %p Some settings are not included yet, such as ones which assign an object or array of data.
        %p You should feel free to edit the csv file in an office suite program and commit changes to the git repo. I have been using LibreOffice. Avoid editing the file directly, as it can be tricky to escape control characters like commas and quotation marks and semi-colons.
        %p For now, we will probably be excluding settings which take a prepended argument (window.url_root +) as the case is complex and the benefit of being able to edit those settings remotely is minimal. If they are needed, it would be better to define an intermediary setting which the app reads and prepends.
        %p When editing main.csv, unfortunately (for now) the rails server will have to be restarted if setting TRUE for a field not to show up. This is because methods are added to the Setting model programmatically from the csv at the first time setting.rb is accessed by the program.
        %p Checkall and Uncheckall may be a little bit buggy on this page. Keep alert for values not updating correctly.
        %br
        %p Also jQuery accodion doesn't work very nicely, so it is disabled for now. We could roll our own solution if needed.

        %p A hidden notification (internet only) exists to force a repull when the user visits the home screen. It should work for most settings, but some will need to be identified and adjusted which do not update correctly (for example, if the settings is already applied to a DOM element, it wouldn't be updated just by updating the EKM.some_setting value).

        = form_for @cordova_ekm_settings, :html => { :method => :post }, :url => '/settings/update_admin_cordova_settings' do |f|
            = f.submit 'Update Admin Cordova Settings', class:'btn btn-primary'
            %br
            %br
            = link_to 'Copy Settings Form', "/settings/copy_settings_form", class:"btn btn-primary"
            %br
            %br
            #accordion
                :ruby
                    def boolean_setting_tag setting
                        model = setting[:namespace] == 'EKM' ? @cordova_ekm_settings : @cordova_window_settings
                        hidden_field_tag("#{setting[:namespace]}_booleans[#{setting[:name]}]", "0") +
                        check_box_tag(
                          "#{setting[:namespace]}_booleans[#{setting[:name]}]", model.send(setting[:name].to_sym) ? "1" : "0", !!model.send(setting[:name].to_sym), class: "form-check-input"
                        )
                        #check_box_tag(
                        #  "#{setting[:namespace]}_booleans[#{setting[:name]}]", model.send(setting[:name].to_sym) ? "1" : "0", !!model.send(setting[:name].to_sym)
                        #)
                    end

                    def string_setting_tag setting
                        model = setting[:namespace] == 'EKM' ? @cordova_ekm_settings : @cordova_window_settings
                        text_field_tag(
                          setting[:name].to_sym, model.send(setting[:name].to_sym),
                          name:  "#{setting[:namespace]}_strings[#{setting[:name]}]",
                          class: "form-control"
                        )
                    end

                    def number_setting_tag setting
                        model = setting[:namespace] == 'EKM' ? @cordova_ekm_settings : @cordova_window_settings
                        number_field_tag(
                          setting[:name].to_sym, model.send(setting[:name].to_sym),
                          name:  "#{setting[:namespace]}_numbers[#{setting[:name]}]",
                          class: "form-control"
                        )
                    end

                    def float_setting_tag setting
                        model = setting[:namespace] == 'EKM' ? @cordova_ekm_settings : @cordova_window_settings
                        number_field_tag(
                          setting[:name].to_sym, model.send(setting[:name].to_sym),
                          name:  "#{setting[:namespace]}_floats[#{setting[:name]}]",
                          step: :any,
                          class: "form-control"
                        )
                    end

                    # def select_setting_tag setting
                    #     model = setting[:namespace] == 'EKM' ? @cordova_ekm_settings : @cordova_window_settings
                    #     select_tag setting[:name].to_sym, options_for_select(setting[:select_options]&.split('|')), class: 'custom-select'
                    # end

                - categories.each do |category|
                    %h4= category
                    .acc-div
                        .btn.btn-link{class:"check_all_#{category.gsub(/\W/, '')}"} Check All
                        .btn.btn-link{class:"uncheck_all_#{category.gsub(/\W/, '')}"} Uncheck All
                        %br
                        %br
                        - admin_settings.select {|r| r[:category] == category && r[:type] == 'boolean'}.each do |setting|
                            .form-check{class: category.gsub(/\W/, '')}
                                - unless setting[:comment].blank?
                                    %small= "// " + setting[:comment]
                                %br
                                %label.form-check-label
                                    = boolean_setting_tag setting
                                    %span{style: "word-break: break-word; padding-right: 0.8rem;"}
                                        = "#{setting[:namespace]}.#{setting[:name]}"
                            %br

                        - admin_settings.select {|r| r[:category] == category && r[:type] == 'string'}.each do |setting|
                            .form-group
                                - unless setting[:comment].blank?
                                    %small= "// " + setting[:comment]
                                    %br
                                = "#{setting[:namespace]}.#{setting[:name]}"
                                %br
                                = string_setting_tag setting

                        - admin_settings.select {|r| r[:category] == category && r[:type] == 'number'}.each do |setting|
                            .form-group
                                - unless setting[:comment].blank?
                                    %small= "// " + setting[:comment]
                                    %br
                                = "#{setting[:namespace]}.#{setting[:name]}"
                                %br
                                = number_setting_tag setting

                        - admin_settings.select {|r| r[:category] == category && r[:type] == 'float'}.each do |setting|
                            .form-group
                                - unless setting[:comment].blank?
                                    %small= "// " + setting[:comment]
                                    %br
                                = "#{setting[:namespace]}.#{setting[:name]}"
                                %br
                                = float_setting_tag setting




            = f.submit 'Update Admin Cordova Settings', class:'btn btn-primary'
- else
    Sorry, this page is for super admins only.

