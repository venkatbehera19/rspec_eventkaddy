PROD CONFIG
	mysqladmin password NEWPASSWORD
	grant select,insert,update,delete,create,drop ON eventkaddy_cms_dev.* TO ekuser@"%" identified by 'wigglewort';
	GRANT ALL ON *.* TO 'ekuser'@'localhost' IDENTIFIED BY 'pass1';
	flush privileges
	
	
	RAILS_ENV=production rake db:create db:load
	rake db:setup RAILS_ENV=production
	
	run on Ubuntu Server: ln -s /var/run/mysqld/mysqld.sock /tmp/mysql.sock
	
	NOTE:
		issue with getting rails (rake) to create the development db, migrations work fine)
	
	rails server -e production
	note:
	
	APP-SPECIFIC COMMANDS TO RUN
		chmod 777 public/event_data
		copy application.html.erb to Application.html.erb (weirdness)

RAILS_DATATABLES
	rails plugin install rails_datatables (manual download files from git, put in vendor/plugin folder
	
		
HABTM_CHECKBOXES
	rails plugin install habtml_checkboxes git://github.com/jtrupiano/habtm_checkboxes.git

	
REMOTIPART

	gem install remotipart
	rails g remotipart
		
JQUERY RAILS
	gem 'jquery-rails', '>= 0.2.6'
	And run this command (add --ui if you want jQuery UI):
		bundle install
		rails generate jquery:install


USER AUTH
	http://www.tonyamoyal.com/2010/07/28/rails-authentication-with-devise-and-cancan-customizing-devise-controllers/
	http://groups.google.com/group/plataformatec-devise/browse_thread/thread/08e4b23a0bfa8718
	

LOADING THE DB FROM SCRATCH
	rake db:schema:load


USEFUL LINKS
	http://weblog.rubyonrails.org/
	
SCAFFOLDING
	rails generate scaffold Post name:string title:string content:text
	rake db:rollback
	rake db:rollback STEP=3
	rake db:migrate:redo STEP=3
	rake db:migrate:up VERSION=20080906120000
	
	The types supported by Active Record are :primary_key, :string, :text, :integer, :float, :decimal, :datetime, :timestamp, 
	:time, :date, :binary, :boolean.
	
	
MYSQL
	http://www.databasedesign-resource.com/mysql-triggers.html
	http://www.sequelpro.com/download.html
	
	def self.up
    	execute <<-SQL
        	CREATE TRIGGER my_trigger ...
    	SQL
	end

	TRIGGER TEMPLATE CODE
	
		IF OLD.!= NEW. THEN
			UPDATE eventkaddy_appcel.tracks SET n=NEW. WHERE id=NEW.id;
		END IF;

	MYSQL TRIGGER MIGRATION
	
	BTW. Have tested it. This works. ;)
	
	class InitialTriggersSchema < ActiveRecord::Migration
	def self.up
	  sql = <<-_SQL
	    DROP TRIGGER customer_bi
	    ^
	    CREATE TRIGGER customer_bi BEFORE INSERT ON customers
	      FOR EACH ROW
	      BEGIN
	       SET NEW.txtid = LPAD(TRIM(NEW.txtid),8,' ');
	       SET NEW.sndx = SOUNDEX(NEW.lname) ;
	      END
	    ^
	    DROP TRIGGER customer_bi
	    ^
	    CREATE TRIGGER customer_bi BEFORE UPDATE ON customers
	      FOR EACH ROW
	      BEGIN
	        IF NEW.txtid <> OLD.txtid THEN
	          SET NEW.txtid = LPAD(TRIM(NEW.txtid),8,' ');
	        END IF;
	        SET NEW.sndx = SOUNDEX(NEW.lname) ;
	      END
	    ^
	    /* Other Triggers */
	   _SQL
	  sql.split('^').each do |stmt|
	    execute(stmt) if (stmt.strip! && stmt.length > 0)
	  end
	end
	
	def self.down
	  sql = <<-_SQL
	    DROP TRIGGER customer_bi ;
	    DROP TRIGGER customer_bi ;
	    _SQL
	  sql.split(';').each do |stmt|
	    execute(stmt) if (stmt.strip! && stmt.length > 0)
	  end
	end
	
	The split on '^' in migrations has the same effect as changing the
	delimiter in the mysql client. Thanks again for pointing me in the right
	direction.
	
	mitch 