INSTALL THIN
	
	(ref doc: http://stackoverflow.com/questions/3230404/rvm-and-thin-root-vs-local-user)
	
	in app folder, under specific rvm ruby/gemset
	
		gem install thin (or add to gemfile, run bundle install)
	
	as root, with default rvm ruby/gemset
		
		gem install thin (might be necessary)
		rvmsudo thin install (setup thin as a runlevel script under /etc/init.d/thin)
		mv /etc/init.d/thin /etc/init.d/thin1 #rename in prep for customization for specific ruby/gemset
		rvmsudo /usr/sbin/update-rc.d -f thin1 defaults #set defaults, including auto start on boot


CONFIGURE THIN

	setup thin cluster for particular app, as deploy user
		rvmsudo thin config -C /etc/thin/ekcharlie.yml -c /home/deploy/ek-cms-charlie --servers 3 -e production --socket /tmp/thin.sock -d
	
	create wrapper for specific rvm ruby/gemset
		rvm wrapper <rubyversion>@<gemset> bootup1 thin
	
	
	replace contents of /etc/init.d/thin1:
	
	---
	
				#!/bin/sh
		### BEGIN INIT INFO
		# Provides:          thin
		# Required-Start:    $local_fs $remote_fs
		# Required-Stop:     $local_fs $remote_fs
		# Default-Start:     2 3 4 5
		# Default-Stop:      S 0 1 6
		# Short-Description: thin initscript
		# Description:       thin
		### END INIT INFO
		
		# Original author: Forrest Robertson
		
		# Do NOT "set -e"
		
		#DAEMON=/usr/local/rvm/gems/ruby-1.9.3-p194@ekcharlie/bin/thin
		DAEMON=/usr/local/rvm/bin/bootup1_thin
		
		SCRIPT_NAME=/etc/init.d/thin1
		CONFIG_PATH=/etc/thin
		
		# Exit if the package is not installed
		[ -x "$DAEMON" ] || exit 0
		
		case "$1" in
		  start)
			$DAEMON -C /etc/thin/ekcharlie.yml start
		#	$DAEMON start --all $CONFIG_PATH
			;;
		  stop)
			$DAEMON -C /etc/thin/ekcharlie.yml stop
		#	$DAEMON stop --all $CONFIG_PATH
			;;
		  restart)
			$DAEMON -C /etc/thin/ekcharlie.yml restart
		#	$DAEMON restart --all $CONFIG_PATH
			;;
		  *)
			echo "Usage: $SCRIPT_NAME {start|stop|restart}" >&2
			exit 3
			;;
		esac
		
		:

	 ---
	 
	 sudo service thin1 start

	 set nginx to boot on start up
	 	
	 	sudo /usr/sbin/update-rc.d -f nginx defaults		




		
			 
ADJUST NGINX.CONF TO USE THIN STANDALONE SERVERS

http {

  ..
  
  # this is where you define your mongrel clusters. 
  # you need one of these blocks for each cluster
  # and each one needs its own name to refer to it later.
  upstream ekcharlie_thin {
   server   unix:/tmp/thin.0.sock;
   server   unix:/tmp/thin.1.sock;
   server   unix:/tmp/thin.2.sock;  
  }


  # the server directive is nginx's virtual host directive.
  server {
    # port to listen on. Can also be set to an IP:PORT
    listen 80;
    
    # Set the max size for file uploads to 50Mb
    client_max_body_size 50M;

    # sets the domain[s] that this vhost server requests for
    server_name charlie.eventkaddy.net;

    # doc root
    root /home/deploy/ek-cms-charlie/public;

    # vhost specific access log
    #access_log  /var/log/nginx.vhost.access.log  main;

    # this rewrites all the requests to the maintenance.html
    # page if it exists in the doc root. This is for capistrano's
    # disable web task
    if (-f $document_root/system/maintenance.html) {
      rewrite  ^(.*)$  /system/maintenance.html last;
      break;
    }

    location / {
      # needed to forward user's IP address to rails
      proxy_set_header  X-Real-IP  $remote_addr;

      # needed for HTTPS
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_max_temp_file_size 0;
      
      # If the file exists as a static file serve it directly without
      # running all the other rewite tests on it
      if (-f $request_filename) { 
        break; 
      }

      # check for index.html for directory index
      # if its there on the filesystem then rewite 
      # the url to add /index.html to the end of it
      # and then break to send it to the next config rules.
      if (-f $request_filename/index.html) {
        rewrite (.*) $1/index.html break;
      }

      # this is the meat of the rails page caching config
      # it adds .html to the end of the url and then checks
      # the filesystem for that file. If it exists, then we
      # rewite the url to have explicit .html on the end 
      # and then send it on its way to the next config rule.
      # if there is no file on the fs then it sets all the 
      # necessary headers and proxies to our upstream mongrels
      if (-f $request_filename.html) {
        rewrite (.*) $1.html break;
      }

      if (!-f $request_filename) {
        proxy_pass http://ekcharlie_thin;
        break;
      }
    }

    error_page   500 502 503 504  /500.html;
    location = /500.html {
      root   /home/deploy/ek-cms-charlie/public;
    }
  }
  

  # This server is setup for ssl. Uncomment if 
  # you are using ssl as well as port 80.
  server {
    # port to listen on. Can also be set to an IP:PORT
    listen 443;

    #ssl on;

    #ssl_protocols  SSLv2 SSLv3 TLSv1;
    #ssl_ciphers  HIGH:!aNULL:!MD5;
    #ssl_prefer_server_ciphers   on;
    
    # Set the max size for file uploads to 50Mb
    client_max_body_size 50M;

    # sets the domain[s] that this vhost server requests for
    server_name charlie.eventkaddy.net;

    # doc root
    root /home/deploy/ek-cms-charlie/public;

    # vhost specific access log
    #access_log  /var/log/nginx.vhost.access.log  main;

    # this rewrites all the requests to the maintenance.html
    # page if it exists in the doc root. This is for capistrano's
    # disable web task
    if (-f $document_root/system/maintenance.html) {
      rewrite  ^(.*)$  /system/maintenance.html last;
      break;
    }

    location / {
      # needed to forward user's IP address to rails
      proxy_set_header  X-Real-IP  $remote_addr;

      # needed for HTTPS
      proxy_set_header X_FORWARDED_PROTO https;

      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_max_temp_file_size 0;
      
      # If the file exists as a static file serve it directly without
      # running all the other rewite tests on it
      if (-f $request_filename) { 
        break; 
      }

      # check for index.html for directory index
      # if its there on the filesystem then rewite 
      # the url to add /index.html to the end of it
      # and then break to send it to the next config rules.
      if (-f $request_filename/index.html) {
        rewrite (.*) $1/index.html break;
      }

      # this is the meat of the rails page caching config
      # it adds .html to the end of the url and then checks
      # the filesystem for that file. If it exists, then we
      # rewite the url to have explicit .html on the end 
      # and then send it on its way to the next config rule.
      # if there is no file on the fs then it sets all the 
      # necessary headers and proxies to our upstream mongrels
      if (-f $request_filename.html) {
        rewrite (.*) $1.html break;
      }

      if (!-f $request_filename) {
        proxy_pass http://ekcharlie_thin;
        break;
      }
    }

    error_page   500 502 503 504  /500.html;
    location = /500.html {
      root   /home/deploy/ek-cms-charlie/public;
    }
  }
  	